service: ${self:custom.namespace}-backend-${self:custom.version}

provider:
  name: aws
  region: us-east-1
  runtime: nodejs16.x
  stage: ${opt:stage, 'devl'}
  iam:
    role: BCLambdaRole
  environment:
    # https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-retrieve
    STACK_NAME: ${self:service}
    STAGE: ${self:provider.stage}
    BC_APP_TABLE_NAME: { Ref: BCDynamoDBTable }

plugins:
  - serverless-appsync-plugin

custom:
  namespace: bc-gay
  version: v0
  user_pool_client_hosted_ui_domain: brittanyandcaleb${self:custom.version}${self:provider.stage}
  ses_template_names:
    notify_on_participant: ${self:service}-${self:provider.stage}-notify-template
    nightly_report: ${self:service}-${self:provider.stage}-nightly-report

appSync:
  name: ${self:service}
  schema: ../graphql-api/appsync-schema/internal.graphql
  authentication:
    type: 'AMAZON_COGNITO_USER_POOLS'
    config:
      userPoolId: { Ref: 'BCCognitoUserPool' }
      awsRegion: ${self:provider.region}
      defaultAction: ALLOW
  logging:
    roleArn: { 'Fn::GetAtt': [AppSyncLogRole, Arn] }
    level: ALL
  resolvers:
    createParticipant:
      type: Mutation
      field: createParticipant
      kind: UNIT
      dataSource:
        type: AWS_LAMBDA
        description: Create Participant Lambda Function
        config:
          serviceRoleArn: { 'Fn::GetAtt': [AppSyncToLambdaServiceRole, Arn] }
          function:
            handler: build/appsync/internal.AS_LAM_createParticipant
            memorySize: 1024
            timeout: 6
      request: mapping-templates/generic-request.vtl
      response: mapping-templates/response-throw-runtime-error.vtl
    updateParticipant:
      type: Mutation
      field: updateParticipant
      kind: UNIT
      dataSource:
        type: AWS_LAMBDA
        description: Update Participant Lambda Function
        config:
          serviceRoleArn: { 'Fn::GetAtt': [AppSyncToLambdaServiceRole, Arn] }
          function:
            handler: build/appsync/internal.AS_LAM_updateParticipant
            memorySize: 1024
            timeout: 6
      request: mapping-templates/generic-request.vtl
      response: mapping-templates/response-throw-runtime-error.vtl
    getParticipant:
      type: Query
      field: getParticipant
      kind: UNIT
      dataSource:
        type: AWS_LAMBDA
        description: Get Participant Lambda Function
        config:
          serviceRoleArn: { 'Fn::GetAtt': [AppSyncToLambdaServiceRole, Arn] }
          function:
            handler: build/appsync/internal.AS_LAM_getParticipant
            memorySize: 1024
            timeout: 6
      request: mapping-templates/generic-request.vtl
      response: mapping-templates/response-throw-runtime-error.vtl

functions:
  sendEmail:
    handler: build/dynstream/internal.DYN_sendEmail
    memorySize: 1024
    timeout: 900
    role: BCStreamHandlerLambdaRole
    environment:
      SES_TEMPLATE_NAME: ${self:custom.ses_template_names.notify_on_participant}
      SES_EMAIL_RECIPIENTS: ${env:SES_EMAIL_RECIPIENTS}
    events:
      - stream:
          type: dynamodb
          arn: { 'Fn::GetAtt': [BCDynamoDBTable, StreamArn] }
  # sendNightlyReport:
  #   condition: IsProd
  #   handler: build/scheduled-report/nightly.LAM_sendReportEmail
  #   memorySize: 1024
  #   timeout: 900
  #   role: BCReportLambdaRole # <- sort of tech debt
  #   environment:
  #     SES_TEMPLATE_NAME: ${self:custom.ses_template_names.nightly_report}
  #     SES_EMAIL_RECIPIENTS: ${env:SES_EMAIL_RECIPIENTS}
  #   events:
  #     - schedule: cron(0 1 * * ? *)

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification-format.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
# ^ a man's best friend
resources:
  Conditions:
    IsProd: { 'Fn::Equals': ['${self:provider.stage}', 'prod'] }

  Resources:
    BCCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        MfaConfiguration: 'OFF'
        EmailConfiguration:
          SourceArn: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/calebgregory@gmail.com
          ReplyToEmailAddress: calebgregory@gmail.com
          EmailSendingAccount: DEVELOPER
          From: 'Caleb Gregory <calebgregory@gmail.com>'
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Priority: 1
              Name: verified_email
            - Priority: 2
              Name: verified_phone_number

    # this is required for using the Hosted UI for sign in
    BCUserPoolClientHostedUIDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: { Ref: BCCognitoUserPool }
        Domain: ${self:custom.user_pool_client_hosted_ui_domain}

    BCCognitoUserPoolIdentityProviderGoogle:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google # this _must_ = 'Google' https://github.com/hashicorp/terraform-provider-aws/issues/4822
        ProviderType: Google
        ProviderDetails:
          client_id: ${env:GOOGLE_CLIENT_ID}
          client_secret: ${env:GOOGLE_CLIENT_SECRET}
          authorize_scopes: email profile openid
        # remember to use this endpoint in Google App setup https://docs.aws.amazon.com/cognito/latest/developerguide/authorization-endpoint.html
        AttributeMapping:
          {
            'email_verified': 'email_verified',
            'phone_number': 'phoneNumbers',
            'given_name': 'given_name',
            'family_name': 'family_name',
            'name': 'name',
            'email': 'email',
            'username': 'sub',
          }
        UserPoolId: { Ref: BCCognitoUserPool }

    BCCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: BCCognitoUserPoolIdentityProviderGoogle
      Properties:
        ClientName: ${self:service}-user-pool-client-web-${self:provider.stage}
        GenerateSecret: false
        UserPoolId: { Ref: BCCognitoUserPool }
        RefreshTokenValidity: 30
        SupportedIdentityProviders:
          # - COGNITO
          - Google
        CallbackURLs:
          - https://brittanyandcaleb.gay
          - https://localhost:3000
        AllowedOAuthFlows: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html#cfn-cognito-userpoolclient-allowedoauthflows
          - implicit
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - phone
          - profile
        AllowedOAuthFlowsUserPoolClient: true

    BCDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-table-BCApp-v0
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    AppSyncLogRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-appsync-log-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action: sts:AssumeRole
        Path: '/service-role/'
        Policies:
          - PolicyName: AppsyncLogPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'arn:aws:logs:*:*:*'

    AppSyncToLambdaServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-appsync-to-lambda-service-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-appsync-to-lambda-service-role-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-*

    BCLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-policy-LogWriter
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
          - PolicyName: ${self:service}-${self:provider.stage}-policy-DynamoDBWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                  Resource: { 'Fn::GetAtt': [BCDynamoDBTable, Arn] }

    BCStreamHandlerLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-strm-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          # TODO: use managed policies
          - PolicyName: ${self:service}-${self:provider.stage}-policy-StrmLogWriter
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
          - PolicyName: ${self:service}-${self:provider.stage}-policy-DynamoStreamWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:DescribeStream
                    - dynamodb:ListStreams
                  Resource: { 'Fn::GetAtt': [BCDynamoDBTable, StreamArn] }
                - Effect: Allow # because this thing is sending emails
                  Action:
                    - ses:SendTemplatedEmail
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource:
                    - '*'

    BCReportLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-rprt-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          # TODO: use managed policies
          - PolicyName: ${self:service}-${self:provider.stage}-policy-RprtLogWriter
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                  Resource: { 'Fn::GetAtt': [BCDynamoDBTable, Arn] }
                - Effect: Allow # because this thing is sending emails
                  Action:
                    - ses:SendTemplatedEmail
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource:
                    - '*'

    SESNotifyOnParticipantTemplate:
      Type: 'AWS::SES::Template'
      Properties:
        Template:
          TemplateName: ${self:custom.ses_template_names.notify_on_participant}
          SubjectPart: '🌈 🎉 It looks like we have an RSVP❣️'
          HtmlPart: ${file(email-templates/notify_on_participant/template.html)}
          TextPart: ${file(email-templates/notify_on_participant/template.txt)}

    SESNightlyReportTemplate:
      Type: 'AWS::SES::Template'
      Properties:
        Template:
          TemplateName: ${self:custom.ses_template_names.nightly_report}
          SubjectPart: "💋💘 It's nightly report time 💘💋"
          HtmlPart: ${file(email-templates/nightly_report/template.html)}
          TextPart: ${file(email-templates/nightly_report/template.txt)}

  Outputs:
    BCCognitoUserPoolId:
      Description: 'Brittany and Caleb Wedding Invitation Web App Cognito User Pool ID'
      Value: { Ref: BCCognitoUserPool }

    BCCognitoUserPoolClientId:
      Description: 'Brittany and Caleb Wedding Invitation Web App Cognito User Pool Client ID'
      Value: { Ref: BCCognitoUserPoolClient }

    BCDynamoDbARN:
      Description: 'Brittany and Caleb Wedding Invitation Web App DynamoDB ARN'
      Value: { 'Fn::GetAtt': [BCDynamoDBTable, Arn] }

    BCUserPoolClientHostedUIDomainName:
      Description: 'The Cognito Hosted UI Domain Name'
      Value: ${self:custom.user_pool_client_hosted_ui_domain}

    GraphQlApiUrl:
      Value: ${appsync:url}
